#! /bin/bash

# For debugging:
verbose=0
forceUpdate=0


mainFunction () {
	if updatingIsFavorable && updatingIsNeeded; then
		updateKeyrings
		updateSystem
	fi
}


batteryIsCharged () {
	local capacity="/sys/class/power_supply/BAT1/capacity"

	[[ ! -f "${capacity}" || "$(cat "${capacity}")" -ge 90 ]]
}


forcedUpdate () {
	[[ "${forceUpdate}" -eq 1 ]]
}


checkDebugVariables () {
	local variables=("verbose" "forceUpdate")

	for variable in "${variables[@]}"; do
		if [[ "${!variable}" -ne 0 ]] && [[ "${!variable}" -ne 1 ]]; then
			echo "Invalid ${variable}=${!variable}" >&2
			echo "It can either be 0 or 1"
			exit 1
		fi
	done
}


checkPermissions () {
	if [[ "$(id -u)" -ne 0 ]]; then
		sudo "${0}"
		exit "${?}"
	fi
}


configureTrap () {
	interrupted=""
	setTrap "nonCriticalTrap"
}


connectionIsMetered () {
	[[ -f "/usr/bin/nmcli" ]] &&
	systemctl status NetworkManager | grep --quiet "running" &&
	nmcli --terse --fields GENERAL.METERED dev show | grep --quiet "yes"
}


criticalTrap () {
	nonCriticalTrap
	printf "\nðŸ•‘ Waiting for critical part to finish\n"
}


downloadPackage () {
	local package="${1}"

	so pacman --sync --noconfirm --downloadonly "${package}"
}


ifNotInterrupted () {
	local command="${@}"

	if [[ -z "${interrupted}" ]] && [[ batteryIsCharged || forcedUpdate ]]; then
		${command}
	else
		exit 0
	fi
}


installPackage () {
	local package="${1}"

	so pacman --sync --noconfirm "${package}"
}


installUpdates () {
	so pacman --sync --sysupgrade --noconfirm ${@}
}


keyrings () {
	local candidates; readarray -t candidates < <(packagesWithKeyword "query" "keyring")

	for candidate in "${candidates[@]}"; do
		if stringIsDate "$(packageVersion "query" "${candidate}")"; then
			echo "${candidate}"
		fi
	done
}


nonCriticalTrap () {
	interrupted=1
}


ongoingInstallation () {
	local lock="/var/lib/pacman/db.lck"

	if [[ -f "${lock}" ]]; then
		local modified; modified="$(stat --format=%Y "${lock}")"
		local booted; booted="$(date --date="$(who --boot | cut --delimiter=" " --fields=13-)" +%s)"

		if [[ $(( "${modified}" - "${booted}" )) -lt 0 ]] ||
		[[ $(( "$(date +%s)" - "${modified}" )) -gt 86400 ]]; then
			rm "${lock}"
			false
		else
			true
		fi
	else
		false
	fi
}


packageInfo () {
	local operation="${1}"
	local package="${2}"
	local section="${3}"

	pacman --"${operation}" --info "${package}" |
	grep "^${section}" |
	cut --delimiter=':' --fields=2- |
	cut --delimiter=' ' --fields=2
}


packageIsOutdated () {
	local package="${1}"
	local localVersion; localVersion="$(packageVersion "query" "${package}")"
	local remoteVersion; remoteVersion="$(packageVersion "sync" "${package}")"

	[[ "${localVersion}" != "${remoteVersion}" ]]
}


packagesWithKeyword () {
	local operation="${1}"
	local keyword="${2}"

	pacman --"${operation}" --search "${keyword}" |
	grep --invert-match "^ " |
	cut --delimiter='/' --fields=2 |
	cut --delimiter=' ' --fields=1
}


packageVersion () {
	local operation="${1}"
	local package="${2}"

	packageInfo "${operation}" "${package}" "Version" |
	cut --delimiter='-' --fields=1
}


prepareEnvironment () {
	set -em
	configureTrap
	checkPermissions
	checkDebugVariables
}


pruneOldPackages () {
	pruneOrphans

	if [[ "$(hash paccache 2> /dev/null)" ]]; then
		so paccache --remove --uninstalled --keep 0
		so paccache --remove --keep 2
	fi
}


pruneOrphans () {
	local orphans; orphans="$(pacman --query --deps --unrequired --quiet || true)"

	if [[ -n "${orphans}" ]]; then
		so pacman --noconfirm --remove --recursive --unneeded "${orphans}"
	fi
}


setTrap () {
	local operation="${@}"
	trap "${operation}" ABRT ERR HUP INT QUIT TERM
}


so () {
	local commands="${@}"

	if [[ "${verbose}" -eq 1 ]]; then
		if ! ${commands}; then
			exit "${?}"
		fi
	elif ! error="$(eval "${commands}" 2>&1 >"/dev/null")" ; then
		if [ "${error}" == "" ] ; then
			error="Command failed: ${commands}"
		fi

		echo "${FUNCNAME[1]}: ${error}" >&2
		exit 1
	fi
}


stringIsDate () {
	local string="${@}"

	date +%s --date "${string}" &> /dev/null
}


systemIsOutdated () {
	so pacman --sync --refresh
	[[ -n "$(pacman --query --upgrades 2> /dev/null || true)" ]]
}


updateKeyrings () {
	local keyrings; readarray -t keyrings < <(keyrings)

	for keyring in "${keyrings[@]}"; do
		if packageIsOutdated "${keyring}"; then
			ifNotInterrupted downloadPackage "${keyring}"
			ifNotInterrupted waitFor installPackage "${keyring}"
		fi
	done
}


updateSystem () {
	ifNotInterrupted installUpdates "--downloadonly"
	ifNotInterrupted waitFor installUpdates
	ifNotInterrupted waitFor pruneOldPackages
}


updatingIsFavorable () {
	! ongoingInstallation && ! connectionIsMetered
}


updatingIsNeeded () {
	systemIsOutdated || forcedUpdate
}


waitFor () {
	local command="${@}"

	setTrap "criticalTrap"
	${command} &

	while wait "$!"; status="$?"; [[ "${status}" -ge 128 ]]; do
		sleep 1
	done

	if [[ "${status}" -ne 0 ]]; then
		exit "${status}"
	fi

	setTrap "nonCriticalTrap"
}


prepareEnvironment
mainFunction
