#! /bin/bash
set -em

# For debugging:
verbose=0
forceUpdate=0

# Other:
lock="/var/lib/pacman/db.lck"


mainFunction () {
	if updatingIsFavorable && updatingIsNeeded; then
		if updatingAutoupdateIsNeeded; then
			updateAutoupdate
		fi

		updateKeyrings
		updateSystem
	fi

	terminateChildren
}


autoupdateIsOutdated () {
	local repoEpoch; repoEpoch="$(autoupdateRepoEpoch)"
	local localEpoch; localEpoch="$(autoupdateLocalEpoch)"

	! [[ "${localEpoch}" =~ : ]] &&
	[[ "${repoEpoch}" -gt "${localEpoch}" ]]
}


autoupdateLocalEpoch () {
	pacman --query --info pacman-auto-update |
	grep "Version" |
	cut --delimiter=' ' --fields=11 |
	cut --delimiter='-' --fields=1
}


autoupdateRepoEpoch () {
	curl --silent "https://raw.githubusercontent.com/cmuench/pacman-auto-update/master/package/PKGBUILD" |
	grep "pkgver=" |
	cut --delimiter='=' --fields=2
}


batteryIsCharged () {
	local capacity="/sys/class/power_supply/BAT1/capacity"

	[[ ! -f "${capacity}" || "$(cat "${capacity}")" -ge 90 ]]
}


checkDebugVariables () {
	local variables=("verbose" "forceUpdate")

	for variable in "${variables[@]}"; do
		if [[ "${!variable}" -ne 0 ]] && [[ "${!variable}" -ne 1 ]]; then
			echo "Invalid ${variable}=${!variable}" >&2
			echo "It can either be 0 or 1"
			exit 1
		fi
	done
}


checkPermissions () {
	if [[ "$(id -u)" -ne 0 ]]; then
		sudo "${0}"
		exit "${?}"
	fi
}


commandAsUser () {
	local user="${1}"
	local command=("${@:2}")

	#shellcheck disable=SC2068,SC2086
	sudo -E -u ${user} ${command[@]}
}


configureTrap () {
	interrupted=""
	setTrap "nonCriticalTrap"
}


connectionIsMetered () {
    nmcli --terse --fields GENERAL.METERED dev show 2>/dev/null |
    grep --quiet "yes"
}


criticalTrap () {
	nonCriticalTrap
	printf "\nðŸ•‘ Waiting for critical part to finish\n"
}


downloadAutoupdatePackageComponents () {
	local url="https://raw.githubusercontent.com/cmuench/pacman-auto-update/master/package"

	curl --silent "${url}/PKGBUILD" > PKGBUILD
	curl --silent "${url}/recipes.sh" > recipes.sh
}


downloadPackage () {
	local package="${1}"

	so pacman --sync --noconfirm --downloadonly "${package}"
}


enterAutoupdateBuildDir () {
	local dir="/tmp/pacman-auto-update"

	so rm --recursive --force "${dir}"
	so mkdir --parents "${dir}"
	so chown --recursive nobody "${dir}"
	cd "${dir}"
}


forcedUpdate () {
	[[ "${forceUpdate}" -eq 1 ]]
}


ifNotInterrupted () {
	local command=("${@}")

	if [[ -z "${interrupted}" ]]; then
		if batteryIsCharged || forcedUpdate; then
			#shellcheck disable=SC2068
			${command[@]}
		fi
	else
		exit 0
	fi
}


installPackage () {
	local package="${1}"

	so pacman --sync --noconfirm "${package}"
}


installUpdates () {
	#shellcheck disable=SC2068
	so pacman --sync --sysupgrade --noconfirm ${@}
	refreshDatabases
}


keyrings () {
	local candidates; readarray -t candidates < <(packagesWithKeyword "query" "keyring")

	for candidate in "${candidates[@]}"; do
		if stringIsDate "$(packageVersion "query" "${candidate}")"; then
			echo "${candidate}"
		fi
	done
}


makePackage () {
	export PACKAGER="autoupdate <@${HOSTNAME}>"
	so commandAsUser nobody makepkg --syncdeps --needed --rmdeps --force --noconfirm
}


nonCriticalTrap () {
	interrupted=1
}


ongoingInstallation () {
	if [[ -f "${lock}" ]]; then
		local modified; modified="$(stat --format=%Y "${lock}")"
		local booted; booted="$(date --date="$(who --boot | cut --delimiter=" " --fields=13-)" +%s)"

		if [[ $(( "${modified}" - "${booted}" )) -lt 0 ]] ||
		[[ $(( "$(date +%s)" - "${modified}" )) -gt 86400 ]]; then
			rm "${lock}"
			false
		else
			true
		fi
	else
		false
	fi
}


packageInfo () {
	local operation="${1}"
	local package="${2}"
	local section="${3}"

	pacman --"${operation}" --info "${package}" |
	grep "^${section}" |
	cut --delimiter=':' --fields=2- |
	cut --delimiter=' ' --fields=2
}


packageIsOutdated () {
	local package="${1}"
	local localVersion; localVersion="$(packageVersion "query" "${package}")"
	local remoteVersion; remoteVersion="$(packageVersion "sync" "${package}")"

	[[ "${localVersion}" != "${remoteVersion}" ]]
}


packagesWithKeyword () {
	local operation="${1}"
	local keyword="${2}"

	pacman --"${operation}" --search "${keyword}" |
	grep --invert-match "^ " |
	cut --delimiter='/' --fields=2 |
	cut --delimiter=' ' --fields=1
}


packageVersion () {
	local operation="${1}"
	local package="${2}"

	packageInfo "${operation}" "${package}" "Version" |
	cut --delimiter='-' --fields=1
}


prepareEnvironment () {
	configureTrap
	checkPermissions
	checkDebugVariables
}


pruneOldPackages () {
	pruneOrphans

	if [[ "$(hash paccache 2> /dev/null)" ]]; then
		so paccache --remove --uninstalled --keep 0
		so paccache --remove --keep 2
	fi
}


pruneOrphans () {
	local orphans; orphans="$(pacman --query --deps --unrequired --quiet || true)"

	if [[ -n "${orphans}" ]]; then
		so pacman --noconfirm --remove --recursive --unneeded "${orphans}"
	fi
}


refreshDatabases () {
	waitLock
	so pacman --sync --refresh
	so pacman --files --refresh
}


removeCurrentDir () {
	local dir="${PWD}"
	cd ".."
	so rm --recursive --force "${dir}"
}


setTrap () {
	local operation="${*}"
	trap '${operation}' ABRT ERR HUP INT QUIT TERM
}


so () {
	local commands=("${@}")

	if [[ "${verbose}" -eq 1 ]]; then
		#shellcheck disable=SC2068
		if ! ${commands[@]}; then
			exit "${?}"
		fi
	elif ! error="$(eval "${commands[*]}" 2>&1 >"/dev/null")" ; then
		if [[ "${error}" == "" ]] ; then
			error="Command failed: ${commands[*]}"
		fi

		echo "${FUNCNAME[1]}: ${error}" >&2
		false
	fi
}


stringIsDate () {
	local string="${*}"

	date +%s --date "${string}" &> /dev/null
}


systemIsOutdated () {
	refreshDatabases
	pacman --query --upgrades &> /dev/null
}


terminateChildren () {
	pkill -TERM -P $$ &>/dev/null || true
}


updateAutoupdate () {
	enterAutoupdateBuildDir
	downloadAutoupdatePackageComponents
	makePackage
	waitFor updatePackagesHere
	removeCurrentDir
}


updateKeyrings () {
	if ! updateKeyringsFromRepo; then
		updateKeyringsFromServer
	fi
}


updateKeyringsFromRepo () {
	local keyrings; readarray -t keyrings < <(keyrings)

	for keyring in "${keyrings[@]}"; do
		if packageIsOutdated "${keyring}"; then
			ifNotInterrupted downloadPackage "${keyring}"
			ifNotInterrupted waitFor installPackage "${keyring}" 2>/dev/null
		fi
	done
}


updateKeyringsFromServer () {
	so pacman-key --refresh-keys
}


updatePackagesHere () {
	so pacman --upgrade --noconfirm ./*.pkg.*
	refreshDatabases
}


updateSystem () {
	ifNotInterrupted installUpdates "--downloadonly"
	ifNotInterrupted waitFor installUpdates
	ifNotInterrupted waitFor pruneOldPackages
}


updatingAutoupdateIsNeeded () {
	autoupdateIsOutdated || forcedUpdate
}


updatingIsFavorable () {
	! ongoingInstallation && ! connectionIsMetered
}


updatingIsNeeded () {
	systemIsOutdated || forcedUpdate
}


waitFor () {
	local command=("${@}")

	setTrap "criticalTrap"
	#shellcheck disable=SC2068
	${command[@]} &

	while wait "$!"; status="$?"; [[ "${status}" -ge 128 ]]; do
		sleep 1
	done

	setTrap "nonCriticalTrap"

	if [[ "${status}" -ne 0 ]]; then
		false
	fi
}


waitLock () {
	while [[ -f "${lock}" ]]; do
		sleep 0.1
	done
}


prepareEnvironment
mainFunction
